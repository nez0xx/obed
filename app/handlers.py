from aiogram import Router, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext

from app.database.db_helper import sessionmanager
from app.exceptions import DetailedException
from app.keyboards import get_date_kb, get_cancel_button, get_confirmation_kb, build_all_contests_kb
from app.service import create_contest_service, create_comment_service, get_statistics_service, create_reaction_service
from app.states import Contest
from app.utils import validate_date, validate_time, convert_to_datetime


router = Router(name=__name__)




@router.message(Command("prices", prefix="/!%"))
async def buy_sub(message: types.Message):
    await message.answer("–ü–æ–¥–ø–∏—Å–∫–∞ –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ –∫–æ–Ω–∫—É—Ä—Å–∞—Ö\n1 –º–µ—Å—è—Ü - 100—Ä—É–±.\n–ß—Ç–æ–±—ã –Ω–µ –ø–æ–ø–æ–ª–Ω—è—Ç—å —Å—á—ë—Ç –∫–∞–∂–¥—ã–π –º–µ—Å—è—Ü, –∑–∞–ø–ª–∞—Ç–∏—Ç–µ —Å—Ä–∞–∑—É –∑–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–µ—Å—è—Ü–µ–≤ –≤–ø–µ—Ä—ë–¥.")


@router.message(Command("start", prefix="/!%"))
async def start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç –¥–ª—è —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π –≤ –∫–æ–º–º–µ–Ω—Ç–µ—Ä–∏—è—Ö. –û–ø–ª–∞—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –∏ –æ—Å—Ç–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ–¥ —É–∫–∞–∑–∞–Ω–Ω—ã–º –ø–æ—Å—Ç–æ–º, —á—Ç–æ–± –ø–æ–ª—É—á–∏—Ç—å —à–∞–Ω—Å –ø–æ–±–µ–¥–∏—Ç—å –≤ –∫–æ–Ω–∫—É—Ä—Å–µ –∏ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–∑")




@router.message(Command("buy", prefix="/!%"))
async def buy_sub(message: types.Message):
    await message.answer("–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è")


@router.message(Command("cancel", "–æ—Ç–º–µ–Ω–∞", prefix="/!%"))
async def cancel(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")


@router.message(Command("new", prefix="/!%"))
async def create_contest_handler(message: types.Message, state: FSMContext):
    kb = get_date_kb()
    await state.set_state(Contest.start_date)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –∫–æ–Ω–∫—É—Ä—Å–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–¥.–º–º", reply_markup=kb)


@router.message(Contest.start_date)
async def contest_start_date(message: types.Message, state: FSMContext):
    result = tuple(validate_date(message.text))

    if not result[0]:
        await message.answer(result[1])
        return

    kb = get_cancel_button()

    await state.update_data(start_date=result[1])
    await state.set_state(Contest.start_time)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∫–æ–Ω–∫—É—Ä—Å–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —á—á:–º–º\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–∞ 0-23 –∏ 0-59", reply_markup=kb)


@router.message(Contest.start_time)
async def contest_start_time(message: types.Message, state: FSMContext):
    result = validate_time(message.text)
    if not result[0]:
        await message.answer(result[1])
        return

    kb = get_cancel_button()

    await state.update_data(start_time=result[1])
    await state.set_state(Contest.end_date)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –∫–æ–Ω–∫—É—Ä—Å–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–¥.–º–º", reply_markup=kb)


@router.message(Contest.end_date)
async def contest_end_date(message: types.Message, state: FSMContext):
    result = validate_date(message.text)
    if not result[0]:
        await message.answer(result[1])
        return

    kb = get_cancel_button()

    await state.update_data(end_date=result[1])
    await state.set_state(Contest.end_time)
    await message.answer(
        text="–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –∫–æ–Ω–∫—É—Ä—Å–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —á—á:–º–º\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–∞ 0-23 –∏ 0-59",
        reply_markup=kb
    )


@router.message(Contest.end_time)
async def contest_end_time(message: types.Message, state: FSMContext):
    result = validate_time(message.text)
    if not result[0]:
        await message.answer(result[1])
        return

    kb = get_cancel_button()

    await state.update_data(end_time=result[1])
    await state.set_state(Contest.post_link)
    await message.answer("–ü—Ä–∏—à–ª–∏—Ç–µ –ø–æ—Å—Ç, –ø–æ–¥ –∫–æ—Ç–æ—Ä—ã–º –±—É–¥—É—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å—Å—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏", reply_markup=kb)


@router.message(Contest.post_link)
async def contest_end_time(message: types.Message, state: FSMContext):
    post_id = None
    if message.forward_origin.message_id:
        data = await state.get_data()
        if "post_id" not in data:
            await state.update_data(post_id=message.forward_origin.message_id)
            kb = get_confirmation_kb()
            await message.answer('–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–µ–¥—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö', reply_markup=kb)
            await state.set_state(Contest.confirmation)
        else:
            print(data["post_id"])
    '''
    try:
        post_id = extract_id(message.text)
        await state.update_data(post_id=post_id)
    except Exception as e:
        await message.answer(str(e))
    '''
    print(post_id)


@router.message(Contest.confirmation)
async def contest_confirmation(message: types.Message, state: FSMContext):
    if message.text.lower() == "–¥–∞":
        data = await state.get_data()
        print(data)
        start_dt = convert_to_datetime(time=data["start_time"], date=data["start_date"])
        end_dt = convert_to_datetime(time=data["end_time"], date=data["end_date"])

        try:
            post_id = data["post_id"]
            await create_contest_service(start_dt=start_dt, end_dt=end_dt, post_id=post_id)
            await message.answer("–ö–æ–Ω–∫—É—Ä—Å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω‚úÖ")

        except DetailedException as e:
            await message.answer(e.detail)
        await state.clear()

    elif message.text.lower() == "–Ω–µ—Ç":
        await message.answer("–î–∞–Ω–Ω—ã–µ —Å–±—Ä–æ—à–µ–Ω—ã. –°–æ–∑–¥–∞–π—Ç–µ –∫–æ–Ω–∫—É—Ä—Å –∑–∞–Ω–æ–≤–æ‚úÖ")
    else:
        kb = get_confirmation_kb()
        await message.answer('–ù–µ –ø–æ–Ω—è–ª –≤–∞—Å. –ù–∞–ø–∏—à–∏—Ç–µ "–î–∞" –∏–ª–∏ "–ù–µ—Ç"', reply_markup=kb)


@router.message(Command("all", prefix="/"))
async def get_winners(message: types.Message):
    async with sessionmanager.session() as session:
        kb = await build_all_contests_kb(session=session)
    await message.answer("üóì–°–ø–∏—Å–æ–∫ –∫–æ–Ω–∫—É—Ä—Å–æ–≤:", reply_markup=kb)


@router.message(Command("stat", prefix="/"))
async def get_stat(message: types.Message):
    data = await get_statistics_service()
    msg = f"""üìä–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\nüîπ–ü—Ä–æ–≤–µ–¥–µ–Ω–Ω—ã—Ö –∫–æ–Ω–∫—É—Ä—Å–æ–≤: {data["contests_count"]}
üîπ–ù–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {data["comments_count"]}
üîπ–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π: {data["winners_count"]}

"""
    await message.answer(msg)


@router.message_reaction()
async def handle_reaction(message_reaction: types.MessageReactionUpdated):
    if message_reaction.user is None:
        return
    u_id = str(message_reaction.user.id)
    m_id = message_reaction.message_id

    await create_reaction_service(user_id=u_id, message_id=m_id)


@router.message()
async def echo(message: types.Message):
    if message.reply_to_message:
        if message.reply_to_message.forward_from_message_id:
            post_id = message.reply_to_message.forward_from_message_id
            await create_comment_service(
                user_id=str(message.from_user.id),
                message_id=message.message_id,
                post_id=post_id,
                username=message.from_user.username,
                name=message.from_user.full_name
            )
